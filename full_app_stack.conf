# ==============================================================================
# NGINX Configuration (/etc/nginx/sites-available/app.conf)
# This file handles incoming traffic and acts as a reverse proxy for the app.
# After creating this file, you must create a symbolic link to it:
# sudo ln -s /etc/nginx/sites-available/app.conf /etc/nginx/sites-enabled/
# ==============================================================================

user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # The application is running on port 5000 on the local machine
    upstream app_servers {
        server 127.0.0.1:5000;
    }

    server {
        listen 80;
        listen [::]:80;
        server_name your_domain_name.com; # <<<--- REPLACE THIS

        location /static/ {
            root /var/www/your_app/public; # <<<--- REPLACE THIS
            expires 30d;
            access_log off;
        }

        location / {
            proxy_pass http://app_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}


# ==============================================================================
# POSTGRESQL Configuration
# The following sections should be added to their respective files.
# The `version` will vary based on your installation (e.g., `15`).
# ==============================================================================

# --- /etc/postgresql/{version}/main/postgresql.conf ---
# Edit this file to optimize performance.

listen_addresses = 'localhost'
shared_buffers = 4GB                 # <<<--- TUNE BASED ON YOUR RAM (25%)
effective_cache_size = 12GB          # <<<--- TUNE BASED ON YOUR RAM (75%)
maintenance_work_mem = 1GB           
work_mem = 64MB                     
log_destination = 'stderr'
logging_collector = on
log_directory = 'log'
log_filename = 'postgresql-%Y-%m-%d.log'


# --- /etc/postgresql/{version}/main/pg_hba.conf ---
# Edit this file to control client authentication.

host    appdb           appuser         127.0.0.1/32            md5
host    all             all             0.0.0.0/0               reject


# ==============================================================================
# PGBOUNCER Configuration
# ==============================================================================

# --- /etc/pgbouncer/pgbouncer.ini ---
# Configure pgbouncer to connect to your PostgreSQL instance.

[databases]
appdb = host=127.0.0.1 port=5432 dbname=appdb user=appuser password=securepassword

[pgbouncer]
listen_addr = 127.0.0.1
listen_port = 6432
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt
pool_mode = session
max_client_conn = 1000
default_pool_size = 20
min_pool_size = 5
reserve_pool_size = 5
reserve_pool_timeout = 5


# --- /etc/pgbouncer/userlist.txt ---
# This file stores the credentials for the pgbouncer user.
# The password must be a PostgreSQL MD5 hash.
# To generate the hash, use the command:
# `echo -n 'securepasswordappuser' | md5sum`

"appuser" "md5<your_md5_hash_here>"  # <<<--- REPLACE THE HASH


# ==============================================================================
# REDIS Configuration (/etc/redis/redis.conf)
# ==============================================================================

bind 127.0.0.1
requirepass your_strong_redis_password_here # <<<--- REPLACE THIS
save 900 1
save 300 10
save 60 10000
maxmemory 4gb
maxmemory-policy allkeys-lru
logfile /var/log/redis/redis.log
dir /var/lib/redis




# ==============================================================================
# PGPOOL-II Configuration (/etc/pgpool-II/pgpool.conf)
# This file replaces the pgbouncer.ini and userlist.txt files.
# ==============================================================================

# --- Connection and authentication settings ---
# The port pgpool listens on for application connections
listen_addresses = '127.0.0.1'
port = 9999
socket_dir = '/var/run/postgresql'

# Authentication mode (we'll use a simple password file)
auth_method = 'md5'
# The file containing the userlist for authentication.
# This should be in /etc/pgpool-II/
hba_file = '/etc/pgpool-II/hba.conf'
# The file containing user/password pairs (MD5 hashed)
pool_passwd_file = '/etc/pgpool-II/pool_passwd'

# --- Connection Pooling settings ---
# Max number of client connections
num_init_children = 32
max_pool = 10

# --- Backend PostgreSQL Servers (this is the most important part) ---
# Define your PostgreSQL server. You can add more for load balancing/replication.
# The `weight` is used for load balancing read queries.
# The `backend_hostname` is the host where PostgreSQL is running.
backend_hostname0 = '127.0.0.1'
backend_port0 = 5432
backend_weight0 = 1
backend_data_directory0 = '/var/lib/postgresql/{version}/main'

# You would add additional backends for replicas like this:
# backend_hostname1 = '192.168.1.101'
# backend_port1 = 5432
# backend_weight1 = 1
# backend_data_directory1 = '/var/lib/postgresql/{version}/main'

# --- Load Balancing and Replication ---
# Enable load balancing for read queries
load_balance_mode = on
# Send all write queries to the primary server
master_slave_mode = on
# Use streaming replication if you have replicas
# sr_check_period = 10
# sr_check_user = 'repuser'

# --- Health Check ---
# Periodically check if the backend servers are up
health_check_period = 30
health_check_user = 'postgres'
```
# ==============================================================================
# User Authentication (/etc/pgpool-II/pool_passwd)
# This file stores the MD5-hashed passwords for pgpool-II users.
# The user is `appuser` and the password is `securepassword`.
# To generate the hash, you would use a pgpool utility or a similar tool.
# ==============================================================================
appuser:md5<your_md5_hash_here>





